{"version":3,"sources":["topBar.js","search.js","start.js","loadScreen.js","results.js","season.js","seasonBox.js","ratingBox.js","details.js","episode.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","nav","id","class","onClick","flip","href","className","Search","for","type","name","onChange","e","handleChange","value","query","handleSubmit","Start","LoadScreen","string","Results","runSearch","bind","newSearch","console","log","this","loadToggle","$","get","data","status","handleUpdate","alert","prevProps","results","shows","buffer","footer","formatResult","result","data-id","data-title","title","data-image","image","key","src","length","loading","Array","isArray","map","show","more","React","Component","Season","active","toggleSeason","data-index","index","season","number","SeasonBox","target","getAttribute","contents","seasons","indexOf","makeSeason","RatingBox","min","max","step","rating","updateRating","generateEpisode","Details","post","initSeasons","input","updateSeasons","Episode","episode","summary","reroll","changeParams","App","navToggle","handleQuery","handleSearch","updateSearch","setShow","clearEpisode","state","search_input","queried","more_button","ratingFactor","setState","batch","concat","element","currentTarget","showTitle","showId","showImage","seasonIndex","newSeasons","active_seasons","push","season_list","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2dba1f3a.chunk.js","sourcesContent":["import React from 'react';\nimport './static/topBar.scss';\n\nexport function TopBar(props) {\n  var display;\n\n  if(props.nav) {\n    display = (\n      <div id='nav-bar' class='col-12'>\n        <button\n          id='nav-bar-close'\n          class='close-button'\n          onClick={props.flip}\n        >\n          X\n        </button>\n        <div id='inner-nav'>\n          <a class='link-block' href='https://vkwebsite.herokuapp.com/'>Homepage</a>\n          <a class='link-block' href='https://vkplaid.herokuapp.com/'>Plaid Maker</a>\n          <a class='link-block' href='https://vkep-picker.herokuapp.com/ep_search' id='active'>Episode Picker</a>\n          <p class='hidden link-block' id='placeholder'></p>\n        </div>\n      </div>\n    )\n  } else {\n    display = (\n      <div id='top-bar'>\n        <div>\n          <button\n            id='nav-bar-open'\n            className='future-border'\n            onClick={props.flip}\n          >Nav Bar</button>\n          <h1> Episode Picker </h1>\n          <a\n            href='https://github.com/kuertzva/Episode_Picker'\n            id='github-link'\n            className='future-border buttonish'\n          >Github</a>\n        </div>\n      </div>\n    )\n  }\n\n  return display;\n}\n\n// export default TopBar;\n","import React from 'react';\nimport './static/search.scss';\n\nfunction Search(props) {\n  return(\n    <div id='search-section'>\n      <span>\n        <label for='search'> Show: </label>\n        <input\n          type='text'\n          name='search'\n          onChange={(e) => props.handleChange(e)}\n          value={props.query}\n        />\n        <button\n          className= \"future-border\"\n          onClick={props.handleSubmit}\n        >\n          Search\n        </button>\n      </span>\n    </div>\n  )\n}\n\nexport default Search;\n","import React from 'react';\nimport './static/start.scss';\n\nfunction Start(props) {\n  return (\n    <div id='start-page'>\n      <div id='past-searches' className='quick-showcase future-border'>\n        <p>Past Searches: IN DEVELOPMENT</p>\n        <div className='showcase'></div>\n      </div>\n      <div id='popular-searches' className='quick-showcase future-border'>\n        <p>Popular Searches: IN DEVELOPMENT</p>\n        <div className='showcase'></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Start;\n","import React from 'react';\nimport './static/loadScreen.scss';\n\nfunction LoadScreen(props) {\n    return (\n      <h3 className='loading'>\n        {props.string}\n        <span></span>\n      </h3>\n    );\n}\n\nexport default LoadScreen;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport './static/results.scss';\nimport $ from 'jquery';\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.runSearch = this.runSearch.bind(this);\n    this.newSearch = this.newSearch.bind(this);\n  }\n\n  runSearch() {\n    console.log('runSearch()')\n    var attempts = 0;\n    var success = false;\n    var output;\n    this.props.loadToggle();\n\n    $.get('/search_batch', (data, status) => {\n      //\n      this.props.handleUpdate(data);\n      console.log('received')\n    });\n  }\n\n  newSearch() {\n    console.log('search terms initiated');\n    $.get('/q=' + this.props.query, (data, status) => {\n\n\n\n      if (data) {\n        this.runSearch(data);\n      } else {\n        alert(\"Error: failed to update search parameters on server\");\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.newSearch();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.query !== this.props.query) {\n      this.newSearch();\n    }\n  }\n\n  render() {\n    var results;\n    var loading;\n    console.log(this.props.length);\n\n    function formatResult(result) {\n      return (\n        <div\n          data-id={result.id}\n          data-title={result.title}\n          data-image={result.image}\n          key={result.id}\n          onClick={(e) => this.props.onClick(e)}\n          className=\"result\"\n        >\n          <h3> {result.title} </h3>\n          <img src={result.image}/>\n        </div>\n      )\n    }\n    formatResult = formatResult.bind(this);\n\n    if (!this.props.loading && this.props.results.length === 0) {\n      results = (\n        <div id=\"no-results\">\n          <h3> Umm... Hey... </h3>\n          <br/>\n          <p>\n            {\"Your search for '\" + this.props.query +\n            \"' hasn't turned up any results.\"}\n          </p>\n          <br/>\n          <p>\n            {\"This could be due to IMDB not having a matching show or it could be a bug in my code. Please feel encouraged to contact me at kuertzva@miamioh.edu\"}\n          </p>\n        </div>\n      );\n    } else {\n      console.log(this.props.results);\n      console.log(Array.isArray(this.props.results));\n      var shows;\n      var buffer;\n      var footer;\n\n      // create space so search screen doesn't crowd header\n      if (this.props.results.length < 1) {\n        buffer = <div className='load-buffer'></div>\n        shows = null;\n      } else {\n        buffer = null\n        shows = this.props.results.map((show) => formatResult(show));\n      }\n\n      // determine whether to display button, loading screen or nothing\n      if (this.props.loading) {\n        footer =(\n          <div className='load-results'>\n            <LoadScreen string='Searching'/>\n          </div>\n        );\n      } else if (this.props.more) {\n        footer = (\n          <button\n            id=\"more\"\n            className='future-border'\n            onClick={this.runSearch}\n          >\n            More Shows\n          </button>\n        );\n      } else {\n        footer = null;\n      }\n\n      // output\n      results = (\n        <div id=\"results\">\n          {shows}\n          {buffer}\n          {footer}\n        </div>\n      )\n    }\n\n\n    return (\n      <div id=\"results-page\">\n        <h2> {\"Search for '\" +this.props.query + \"':\"} </h2>\n        {results}\n      </div>\n    );\n  }\n}\n\n\nexport default Results;\n","import React from 'react';\nimport './static/season.scss';\n\nfunction Season(props) {\n  return (\n    <p\n      className={props.active}\n      onClick={(e) => props.toggleSeason(e)}\n      data-index={props.index}\n    >\n      {props.season.number}\n    </p>\n  )\n}\n\nexport default Season;\n","import React from 'react';\nimport Season from './season.js';\nimport './static/seasonBox.scss';\n\nfunction SeasonBox(props) {\n\n  function toggleSeason(e) {\n    const index = e.target.getAttribute('data-index');\n    props.toggleSeason(index);\n  }\n\n  function makeSeason(season) {\n\n    var index = props.seasons.indexOf(season);\n    return (\n      <Season\n        season={season}\n        active={'season ' +\n        (season.active? 's-active' : 's-inactive')}\n        key={index}\n        index={index}\n        toggleSeason={toggleSeason}\n      />\n    );\n  }\n\n  var contents = props.seasons.map(season =>(\n    makeSeason(season)\n  ));\n\n  return (\n    <div\n      id='season-box'\n    >\n      <h4>Seasons:</h4>\n      <div id='seasons'>\n        {contents}\n      </div>\n    </div>\n  );\n}\n\nexport default SeasonBox;\n","import React from 'react';\nimport './static/ratingBox.scss';\n\nfunction RatingBox(props) {\n\n  return (\n    <div id='rating-box'>\n      <h4>Rating Factor:</h4>\n      <div id='input-wrapper'>\n        <input\n          type='range'\n          min={1}\n          max={3}\n          step={.1}\n          value={props.rating}\n          onChange={(e) => props.updateRating(e)}\n        />\n        <h5 id='left-label'> None </h5>\n        <h5 id='right-label'> Max </h5>\n      </div>\n      <button\n        className= 'future-border'\n        onClick={props.generateEpisode}\n      >\n        Submit\n      </button>\n    </div>\n  );\n}\n\nexport default RatingBox;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport SeasonBox from './seasonBox.js';\nimport RatingBox from './ratingBox.js';\nimport './static/details.scss';\nimport $ from 'jquery';\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    // gather the seasons from server\n    $.post('/details', {'show_id': this.props.show.id},\n    (data) => {\n      //format seasons\n      var seasons = data.map((season) => {\n        return {\n          number: season,\n          active: true\n        }\n      })\n      this.props.initSeasons(seasons);\n    });\n  }\n\n  render() {\n    var input;\n\n    // if loading\n    if (this.props.loading) {\n      input = (\n        <div className='load-details'>\n          <LoadScreen string='Loading'/>\n        </div>\n      );\n    // make seasons\n    } else {\n      input = (\n        <div\n          id='details-input'\n        >\n          <SeasonBox\n            seasons={this.props.seasons}\n            updateSeasons={this.props.updateSeasons}\n            toggleSeason={this.props.toggleSeason}\n          />\n          <RatingBox\n            rating={this.props.rating}\n            updateRating={this.props.updateRating}\n            generateEpisode={this.props.generateEpisode}\n          />\n        </div>\n      );\n    }\n\n\n    return (\n      <div\n        id='details-screen'\n      >\n        <div\n          id=\"details-display\"\n        >\n          <h3>{this.props.show.title}</h3>\n          <img src={this.props.show.image}/>\n        </div>\n        {input}\n      </div>\n    )\n  }\n\n\n}\n\nexport default Details;\n","import React from 'react';\nimport './static/episode.scss';\n\nfunction Episode(props) {\n  return (\n    <div id='episode-screen'>\n      <div id='episode-top'>\n        <h3>{'S' + props.episode.season + ' E' +\n        props.episode.number + ': ' + props.episode.title}</h3>\n        <img src={props.episode.image}/>\n      </div>\n      <div id='episode-bottom'>\n        <p>{props.episode.summary}</p>\n        <div id='episode-button-box'>\n          <button\n            id='reroll'\n            className= 'future-border'\n            onClick={props.reroll}\n          >\n            Different Episode\n          </button>\n          <button\n            id='changeParams'\n            className= 'future-border'\n            onClick={props.changeParams}\n          >\n            Change Parameters\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Episode;\n","import React from 'react';\nimport { TopBar } from './topBar.js';\nimport './static/App.scss';\nimport Search from './search.js'\nimport Start from './start.js';\nimport Results from './results.js';\nimport Details from './details.js';\nimport Episode from './episode.js';\nimport $ from 'jquery';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.navToggle = this.navToggle.bind(this);\n    this.loadToggle = this.loadToggle.bind(this);\n    this.handleQuery = this.handleQuery.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.updateSearch = this.updateSearch.bind(this);\n    this.setShow = this.setShow.bind(this);\n    this.initSeasons = this.initSeasons.bind(this);\n    this.toggleSeason = this.toggleSeason.bind(this);\n    this.updateRating = this.updateRating.bind(this);\n    this.generateEpisode = this.generateEpisode.bind(this);\n    this.clearEpisode = this.clearEpisode.bind(this);\n\n    this.state = {\n      nav: false,\n      loading: false,\n      search_input: '',\n      query: '',\n      queried: false,\n      results: [],\n      more_button: true,\n      show: null,\n      seasons: [],\n      ratingFactor: 1,\n      episode: null\n    }\n  }\n\n  navToggle() {\n    this.setState((state) => ({\n      nav: !(state.nav)\n    }));\n\n  }\n\n  loadToggle() {\n    this.setState((state) => ({\n      loading: !(state.loading)\n    }));\n  }\n\n\n  // start page functions\n  handleQuery(e) {\n    const value = e.target.value;\n\n    //scrub as needed later\n\n    this.setState({\n      search_input: value\n    })\n\n    //console.log(this.state.query);\n\n  }\n\n  handleSearch() {\n    console.log(\"handleSearch\")\n    if (this.state.search_input.length > 0\n        && this.state.search_input !== this.state.query) {\n      console.log(\"extra length\");\n      this.setState((state) => ({\n        queried : true,\n        query: state.search_input,\n        results: [],\n        show: null,\n        seasons: [],\n        ratingFactor: 1,\n        episode: null\n      }));\n    }\n  }\n\n  //search page functions\n  updateSearch(data) {\n\n    console.log('updateSearch');\n\n    const batch = data[0];\n\n    console.log(batch.length);\n\n    this.setState({\n      results: this.state.results.concat(batch),\n      more_button: data[1]\n    });\n\n    this.loadToggle();\n  }\n\n  setShow(e) {\n    const element = e.currentTarget;\n    const showTitle = element.getAttribute('data-title');\n    const showId = element.getAttribute('data-id');\n    const showImage = element.getAttribute('data-image');\n\n    this.setState({\n      show: {\n        title: showTitle,\n        id: showId,\n        image: showImage\n      }\n    });\n\n    this.loadToggle();\n  }\n\n  //details page functions\n  initSeasons(seasons) {\n    this.setState({\n      seasons: seasons\n    })\n\n    if(this.state.loading) {\n      this.loadToggle();\n    }\n\n    console.log('updateSeasons()');\n  }\n\n  toggleSeason(seasonIndex) {\n    var newSeasons = this.state.seasons;\n\n    newSeasons[seasonIndex].active = !newSeasons[seasonIndex].active;\n\n    this.setState({\n      seasons: newSeasons\n    })\n  }\n\n  updateRating(e) {\n    this.setState({\n      ratingFactor: e.target.value\n    })\n  }\n\n  generateEpisode() {\n\n    // find active seasons for search\n    var active_seasons = [];\n    var season;\n    for(season of this.state.seasons) {\n      if(season.active) {\n        active_seasons.push(season.number);\n      }\n    }\n\n    //console.log(active_seasons);\n\n    // get episode\n    $.post('/episode', { season_list: active_seasons, ratingFactor: this.state.ratingFactor\n    }, (data) => {\n      //format seasons\n      console.log('data received');\n      this.setState({\n        episode: data\n      })\n      console.log('data formatted');\n    });\n  }\n\n  clearEpisode() {\n    this.setState({\n      episode: null\n    })\n  }\n\n  // Overlay will allow for pop ups. null for now\n  render() {\n    var overlay = null;\n\n    var content;\n\n    if (this.state.episode) {\n      content = (\n        <Episode\n          episode={this.state.episode}\n          changeParams={this.clearEpisode}\n          reroll={this.generateEpisode}\n        />\n      );\n    } else if (this.state.show) {\n      content = (\n        <Details\n          show={this.state.show}\n          seasons={this.state.seasons}\n          rating={this.state.ratingFactor}\n          loading={this.state.loading}\n          loadToggle={this.state.loadToggle}\n          initSeasons={this.initSeasons}\n          toggleSeason={this.toggleSeason}\n          updateRating={this.updateRating}\n          generateEpisode={this.generateEpisode}\n        />\n      );\n    } else if (this.state.queried) {\n      console.log(this.state.show);\n      content = (\n        <Results\n          query={this.state.query}\n          loading={this.state.loading}\n          loadToggle={this.loadToggle}\n          results={this.state.results}\n          more={this.state.more_button}\n          handleUpdate={this.updateSearch}\n          onClick={this.setShow}\n        />\n      );\n    } else {\n      content = (\n        <Start/>\n      );\n    }\n\n    return (\n      <div id='frame' className='col-12 row-12'>\n        {overlay}\n        <TopBar\n          nav={this.state.nav}\n          flip={this.navToggle}\n        />\n        <div id=\"content\" className='future-border'>\n          <Search\n            search_input={this.state.search_input}\n            handleChange={this.handleQuery}\n            handleSubmit={this.handleSearch}\n          />\n          <br/>\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}