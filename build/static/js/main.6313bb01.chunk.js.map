{"version":3,"sources":["mainButton.js","topBar.js","search.js","suggestedShow.js","suggestions.js","start.js","loadScreen.js","results.js","season.js","seasonBox.js","ratingBox.js","details.js","episode.js","App.js","serviceWorker.js","index.js"],"names":["MainButton","props","button","document","getElementById","this","id","style","getComputedStyle","parentNode","height","width","content","wrapperStyle","classes","inline","link","className","href","action","title","onClick","React","Component","TopBar","nav","class","flip","Search","for","type","name","onChange","e","handleChange","value","query","handleSubmit","SuggestedShow","data-id","show","data-title","key","data-image","image","data-seasons","seasons","data-active","active","data-ratingFactor","rating_factor","src","Suggestions","state","shows","user","$","get","data","setState","length","map","setShow","Start","LoadScreen","string","Results","runSearch","bind","newSearch","console","log","loadToggle","status","handleUpdate","alert","prevProps","results","buffer","footer","formatResult","result","loading","Array","isArray","more","Season","toggleSeason","data-index","index","season","number","SeasonBox","target","getAttribute","contents","indexOf","makeSeason","RatingBox","min","max","step","rating","updateRating","changeEpisode","Details","post","initSeasons","input","updateSeasons","Episode","generateEpisode","active_seasons","push","season_list","ratingFactor","success","cookie","episode","summary","changeParams","App","navToggle","handleQuery","handleSearch","updateSearch","clearEpisode","suggestionJump","search_input","queried","more_button","batch","concat","element","currentTarget","showTitle","showId","showImage","formattedSeasons","seasonIndex","newSeasons","showSeasons","activeSeasons","split","parseInt","includes","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6313bb01.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport './static/mainButton.scss';\n\nclass MainButton extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    var button = document.getElementById(this.props.id);\n    var style = getComputedStyle(button);\n    button.parentNode.style.height = style.height;\n    button.parentNode.style.width = style.width;\n  }\n\n  render() {\n    var content;\n    const wrapperStyle = {\n      height: this.height,\n      width: this.width\n    }\n\n    var classes = 'future-border';\n    if (this.props.inline) {\n      classes += ' inline'\n    }\n\n    if (this.props.link) {\n      classes += ' buttonish';\n      content = (\n        <a\n          className={classes}\n          href={this.props.action}\n          id={this.props.id}\n        >\n          {this.props.title}\n        </a>\n      );\n\n    } else {\n      content = (\n        <button\n          className={classes}\n          onClick={this.props.action}\n          id={this.props.id}\n        >\n          {this.props.title}\n        </button>\n      );\n    }\n\n    return (\n      <div\n        className='button-wrapper'\n        style = {wrapperStyle}\n      >\n        {content}\n      </div>\n    )\n  }\n}\n\nexport default MainButton;\n","import React from 'react';\nimport MainButton from './mainButton.js';\nimport './static/topBar.scss';\n\nexport function TopBar(props) {\n  var display;\n\n  if(props.nav) {\n    display = (\n      <div id='nav-bar' class='col-12'>\n        <button\n          id='nav-bar-close'\n          class='close-button'\n          onClick={props.flip}\n        >\n          X\n        </button>\n        <div id='inner-nav'>\n          <a class='link-block' href='https://vkwebsite.herokuapp.com/'>Homepage</a>\n          <a class='link-block' href='https://vkplaid.herokuapp.com/'>Plaid Maker</a>\n          <a class='link-block' href='https://vkep-picker.herokuapp.com/ep_search' id='active'>Episode Picker</a>\n          <p class='hidden link-block' id='placeholder'></p>\n        </div>\n      </div>\n    )\n  } else {\n    display = (\n      <div id='top-bar'>\n        <div>\n          <MainButton\n            id='open-nav-button'\n            action={props.flip}\n            title='Nav Bar'\n            link={false}\n            inline={true}\n          />\n          <h1> Episode Picker </h1>\n          <MainButton\n            id='github-button'\n            action='https://github.com/kuertzva/Episode_Picker'\n            title='Github'\n            link={true}\n            inline={true}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return display;\n}\n\n// export default TopBar;\n","import React from 'react';\nimport MainButton from './mainButton.js';\nimport './static/search.scss';\n\nfunction Search(props) {\n  return(\n    <div id='search-section'>\n      <span>\n        <label for='search'> Show: </label>\n        <input\n          type='text'\n          name='search'\n          onChange={(e) => props.handleChange(e)}\n          value={props.query}\n        />\n        <MainButton\n          id='search-button'\n          title='Search'\n          action={props.handleSubmit}\n          link={false}\n        />\n      </span>\n    </div>\n  )\n}\n\nexport default Search;\n","import React from 'react';\nimport './static/suggestedShow.scss';\n\nfunction SuggestedShow(props) {\n\n  return (\n    <div\n      data-id={props.show.link}\n      data-title={props.show.title}\n      key={props.show.id}\n      data-image={props.show.image}\n      data-seasons={props.show.seasons}\n      data-active={props.show.active}\n      data-ratingFactor={props.show.rating_factor}\n      onClick={(e) => props.onClick(e)}\n      className=\"suggested-show\"\n    >\n      <h3> {props.show.title} </h3>\n      <img src={props.show.image}/>\n    </div>\n\n  )\n\n}\n\nexport default SuggestedShow;\n","import React from 'react';\nimport SuggestedShow from './suggestedShow.js'\nimport './static/suggestions.scss';\nimport $ from 'jquery';\n\nclass Suggestions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      shows: null\n    }\n  }\n\n  componentDidMount() {\n\n    if(this.props.user) {\n      $.get('/past_runs',\n      (data) => {\n        this.setState({\n          shows: data\n        });\n      });\n    } else {\n      $.get('/past_searches',\n      (data) => {\n        this.setState({\n          shows: data\n        });\n      });\n    }\n  }\n\n\n  render() {\n    var title;\n    if (this.props.user) {\n      title = 'Past Searches'\n    } else {\n      title = 'Popular Searches'\n    }\n\n    //alert(\"suggestion:\" + this.props.user + this.state.shows)\n\n    if (this.state.shows === null || this.state.length === 0) {\n      return null;\n    } else {\n      var content = this.state.shows.map(show => (\n        <SuggestedShow\n          show={show}\n          onClick={this.props.setShow}\n          key={show.link}\n        />\n      ));\n      return (\n        <div className='suggestion-box future-border'>\n          <p>{title}:</p>\n          <div className='showcase'>\n            {content}\n          </div>\n        </div>\n      );\n    }\n\n\n\n  }\n}\n\nexport default Suggestions;\n","import React from 'react';\nimport Suggestions from './suggestions.js';\nimport './static/start.scss';\n\nfunction Start(props) {\n  return (\n\n    <div id='start-page'>\n      <Suggestions\n        setShow={props.setShow}\n        user={true}\n      />\n      <Suggestions\n        setShow={props.setShow}\n        user={false}\n      />\n    </div>\n  );\n}\n\nexport default Start;\n\n/*\n<div id='past-searches' className='quick-showcase future-border'>\n  <p>Past Searches: IN DEVELOPMENT</p>\n  <div className='showcase'></div>\n</div>\n*/\n","import React from 'react';\nimport './static/loadScreen.scss';\n\nfunction LoadScreen(props) {\n    return (\n      <h3 className='loading'>\n        {props.string}\n        <span></span>\n      </h3>\n    );\n}\n\nexport default LoadScreen;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport MainButton from './mainButton.js';\nimport './static/results.scss';\nimport $ from 'jquery';\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.runSearch = this.runSearch.bind(this);\n    this.newSearch = this.newSearch.bind(this);\n  }\n\n  runSearch() {\n    console.log('runSearch()')\n    var attempts = 0;\n    var success = false;\n    var output;\n    this.props.loadToggle();\n\n    $.get('/search_batch', (data, status) => {\n      //\n      this.props.handleUpdate(data);\n      console.log('received')\n    });\n  }\n\n  newSearch() {\n    console.log('search terms initiated');\n    $.get('/q=' + this.props.query, (data, status) => {\n\n\n\n      if (data) {\n        this.runSearch(data);\n      } else {\n        alert(\"Error: failed to update search parameters on server\");\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.newSearch();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.query !== this.props.query) {\n      this.newSearch();\n    }\n  }\n\n  render() {\n    var results;\n    var loading;\n    console.log(this.props.length);\n\n    function formatResult(result) {\n      return (\n        <div\n          data-id={result.id}\n          data-title={result.title}\n          data-image={result.image}\n          key={result.id}\n          onClick={(e) => this.props.onClick(e)}\n          className=\"result\"\n        >\n          <h3> {result.title} </h3>\n          <img src={result.image}/>\n        </div>\n      )\n    }\n    formatResult = formatResult.bind(this);\n\n    if (!this.props.loading && this.props.results.length === 0) {\n      results = (\n        <div id=\"no-results\">\n          <h3> Umm... Hey... </h3>\n          <br/>\n          <p>\n            {\"Your search for '\" + this.props.query +\n            \"' hasn't turned up any results.\"}\n          </p>\n          <br/>\n          <p>\n            {\"This could be due to IMDB not having a matching show or it could be a bug in my code. Please feel encouraged to contact me at kuertzva@miamioh.edu\"}\n          </p>\n        </div>\n      );\n    } else {\n      console.log(this.props.results);\n      console.log(Array.isArray(this.props.results));\n      var shows;\n      var buffer;\n      var footer;\n\n      // create space so search screen doesn't crowd header\n      if (this.props.results.length < 1) {\n        buffer = <div className='load-buffer'></div>\n        shows = null;\n      } else {\n        buffer = null\n        shows = this.props.results.map((show) => formatResult(show));\n      }\n\n      // determine whether to display button, loading screen or nothing\n      if (this.props.loading) {\n        footer =(\n          <div className='load-results'>\n            <LoadScreen string='Searching'/>\n          </div>\n        );\n      } else if (this.props.more) {\n        footer = (\n          <MainButton\n            id='more-shows-button'\n            title='More Shows'\n            action={this.runSearch}\n            link={false}\n          />\n        );\n      } else {\n        footer = null;\n      }\n\n      // output\n      results = (\n        <div id=\"results\">\n          {shows}\n          {buffer}\n          {footer}\n        </div>\n      )\n    }\n\n\n    return (\n      <div id=\"results-page\">\n        <h2> Search for <span> {\"'\" + this.props.query + \"':\"} </span> </h2>\n        {results}\n      </div>\n    );\n  }\n}\n\n\nexport default Results;\n","import React from 'react';\nimport './static/season.scss';\n\nfunction Season(props) {\n  return (\n    <p\n      className={props.active}\n      onClick={(e) => props.toggleSeason(e)}\n      data-index={props.index}\n    >\n      {props.season.number}\n    </p>\n  )\n}\n\nexport default Season;\n","import React from 'react';\nimport Season from './season.js';\nimport './static/seasonBox.scss';\n\nfunction SeasonBox(props) {\n\n  function toggleSeason(e) {\n    const index = e.target.getAttribute('data-index');\n    props.toggleSeason(index);\n  }\n\n  function makeSeason(season) {\n\n    var index = props.seasons.indexOf(season);\n    return (\n      <Season\n        season={season}\n        active={'season ' +\n        (season.active? 's-active' : 's-inactive')}\n        key={index}\n        index={index}\n        toggleSeason={toggleSeason}\n      />\n    );\n  }\n\n  var contents = props.seasons.map(season =>(\n    makeSeason(season)\n  ));\n\n  return (\n    <div\n      id='season-box'\n    >\n      <h4>Seasons:</h4>\n      <div id='seasons'>\n        {contents}\n      </div>\n    </div>\n  );\n}\n\nexport default SeasonBox;\n","import React from 'react';\nimport MainButton from './mainButton.js';\nimport './static/ratingBox.scss';\n\nfunction RatingBox(props) {\n\n  return (\n    <div id='rating-box'>\n      <h4>Rating Factor:</h4>\n      <div id='input-wrapper'>\n        <input\n          type='range'\n          min={1}\n          max={3}\n          step={.1}\n          value={props.rating}\n          onChange={(e) => props.updateRating(e)}\n        />\n        <h5 id='left-label'> None </h5>\n        <h5 id='right-label'> Max </h5>\n      </div>\n      <MainButton\n        id='get-episode-button'\n        title='Submit'\n        action={() => props.changeEpisode('empty')}\n        link={false}\n      />\n    </div>\n  );\n}\n\nexport default RatingBox;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport SeasonBox from './seasonBox.js';\nimport RatingBox from './ratingBox.js';\nimport './static/details.scss';\nimport $ from 'jquery';\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    // gather the seasons from server\n    $.post('/details', {\n      'show_id': this.props.show.id, \"title\": this.props.show.title,\n      \"image\": this.props.show.image},\n      (data) => {\n        this.props.initSeasons(data);\n        $.get('/update_show');\n      });\n\n\n\n  }\n\n  render() {\n    var input;\n\n    // if loading\n    if (this.props.loading) {\n      input = (\n        <div className='load-details'>\n          <LoadScreen string='Loading'/>\n        </div>\n      );\n    // make seasons\n    } else {\n      input = (\n        <div\n          id='details-input'\n        >\n          <SeasonBox\n            seasons={this.props.seasons}\n            updateSeasons={this.props.updateSeasons}\n            toggleSeason={this.props.toggleSeason}\n          />\n          <RatingBox\n            rating={this.props.rating}\n            updateRating={this.props.updateRating}\n            changeEpisode={this.props.changeEpisode}\n          />\n        </div>\n      );\n    }\n\n\n    return (\n      <div\n        id='details-screen'\n      >\n        <div\n          id=\"details-display\"\n        >\n          <h3>{this.props.show.title}</h3>\n          <img src={this.props.show.image}/>\n        </div>\n        {input}\n      </div>\n    )\n  }\n\n\n}\n\nexport default Details;\n","\nimport React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport MainButton from './mainButton.js';\nimport $ from 'jquery';\nimport './static/episode.scss';\n\nclass Episode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.generateEpisode = this.generateEpisode.bind(this);\n  }\n\n  generateEpisode() {\n\n    // find active seasons for search\n    var active_seasons = [];\n    var season;\n    for(season of this.props.seasons) {\n      if(season.active) {\n        active_seasons.push(season.number);\n      }\n    }\n\n    //console.log(active_seasons);\n\n    // get episode\n    $.post('/episode', { season_list: active_seasons, ratingFactor: this.props.rating\n    }, (data) => {\n      //format seasons\n      console.log('data received');\n      this.props.changeEpisode(data);\n      console.log('data formatted');\n\n      $.get('/update_runs', (data, success) => {\n        if (data !== \"blank\") {\n          document.cookie = data;\n        }\n      });\n    });\n\n\n  }\n\n  componentDidMount() {\n    if (this.props.episode === 'empty') {\n      this.generateEpisode();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.episode === 'empty') {\n      this.generateEpisode();\n    }\n  }\n\n  render() {\n    if (this.props.episode === 'empty') {\n      return (\n        <div id='load-episode'>\n          <LoadScreen\n            string='Loading'\n          />\n        </div>\n\n      )\n    } else {\n      return (\n        <div id='episode-screen'>\n          <div id='episode-top'>\n            <h3>{'S' + this.props.episode.season + ' E' +\n            this.props.episode.number + ': ' + this.props.episode.title}</h3>\n            <img src={this.props.episode.image}/>\n          </div>\n          <div id='episode-bottom'>\n            <p>{this.props.episode.summary}</p>\n            <div id='episode-button-box'>\n              <MainButton\n                id='different-episode-button'\n                title='Different Episode'\n                action={() => this.props.changeEpisode('empty')}\n                link={false}\n              />\n              <MainButton\n                id='change-params-button'\n                title='Change Parameters'\n                action={this.props.changeParams}\n                link={false}\n              />\n            </div>\n          </div>\n        </div>\n    );}\n  }\n}\n\nexport default Episode;\n","import React from 'react';\nimport { TopBar } from './topBar.js';\nimport './static/App.scss';\nimport Search from './search.js'\nimport Start from './start.js';\nimport Results from './results.js';\nimport Details from './details.js';\nimport Episode from './episode.js';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.navToggle = this.navToggle.bind(this);\n    this.loadToggle = this.loadToggle.bind(this);\n    this.handleQuery = this.handleQuery.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.updateSearch = this.updateSearch.bind(this);\n    this.setShow = this.setShow.bind(this);\n    this.initSeasons = this.initSeasons.bind(this);\n    this.toggleSeason = this.toggleSeason.bind(this);\n    this.updateRating = this.updateRating.bind(this);\n    this.changeEpisode = this.changeEpisode.bind(this);\n    this.clearEpisode = this.clearEpisode.bind(this);\n    this.suggestionJump = this.suggestionJump.bind(this);\n\n    this.state = {\n      nav: false,\n      loading: false,\n      search_input: '',\n      query: '',\n      queried: false,\n      results: [],\n      more_button: true,\n      show: null,\n      seasons: [],\n      ratingFactor: 1,\n      episode: null\n    }\n  }\n\n  navToggle() {\n    this.setState((state) => ({\n      nav: !(state.nav)\n    }));\n\n  }\n\n  loadToggle() {\n    this.setState((state) => ({\n      loading: !(state.loading)\n    }));\n  }\n\n\n  // start page functions\n  handleQuery(e) {\n    const value = e.target.value;\n\n    //scrub as needed later\n\n    this.setState({\n      search_input: value\n    })\n\n    //console.log(this.state.query);\n\n  }\n\n  handleSearch() {\n    console.log(\"handleSearch\")\n    if (this.state.search_input.length > 0\n        && this.state.search_input !== this.state.query) {\n      console.log(\"extra length\");\n      this.setState((state) => ({\n        queried : true,\n        query: state.search_input,\n        results: [],\n        show: null,\n        seasons: [],\n        ratingFactor: 1,\n        episode: null\n      }));\n    }\n  }\n\n  //search page functions\n  updateSearch(data) {\n\n    console.log('updateSearch');\n\n    const batch = data[0];\n\n    console.log(batch.length);\n\n    this.setState({\n      results: this.state.results.concat(batch),\n      more_button: data[1]\n    });\n\n    this.loadToggle();\n  }\n\n  setShow(e) {\n    const element = e.currentTarget;\n    const showTitle = element.getAttribute('data-title');\n    const showId = element.getAttribute('data-id');\n    const showImage = element.getAttribute('data-image');\n\n    this.setState({\n      show: {\n        title: showTitle,\n        id: showId,\n        image: showImage\n      }\n    });\n\n    this.loadToggle();\n  }\n\n  //details page functions\n  initSeasons(seasons) {\n    //format seasons\n    var formattedSeasons = seasons.map((season) => {\n      return {\n        number: season,\n        active: true\n      }\n    })\n\n\n\n    this.setState({\n      seasons: formattedSeasons\n    })\n\n    if(this.state.loading) {\n      this.loadToggle();\n    }\n\n    console.log('updateSeasons()');\n  }\n\n  toggleSeason(seasonIndex) {\n    var newSeasons = this.state.seasons;\n\n    newSeasons[seasonIndex].active = !newSeasons[seasonIndex].active;\n\n    this.setState({\n      seasons: newSeasons\n    })\n  }\n\n  updateRating(e) {\n    this.setState({\n      ratingFactor: e.target.value\n    })\n  }\n\n  changeEpisode(data) {\n    this.setState({\n      episode: data\n    })\n  }\n\n  clearEpisode() {\n    this.setState({\n      episode: null\n    })\n  }\n\n  suggestionJump(e) {\n    this.setShow(e)\n\n    const element = e.currentTarget;\n    var showSeasons = element.getAttribute('data-seasons');\n    var activeSeasons = element.getAttribute('data-active');\n    const ratingFactor = element.getAttribute('data-ratingFactor');\n\n    if (showSeasons && ratingFactor) {\n\n      showSeasons = showSeasons.split(',');\n      activeSeasons = activeSeasons.split(',');\n      showSeasons = showSeasons.map(season => parseInt(season));\n      activeSeasons = activeSeasons.map(season => parseInt(season));\n\n\n      this.initSeasons(showSeasons);\n\n      var season;\n      for(season of showSeasons) {\n        if(!activeSeasons.includes(season)) {\n          this.toggleSeason(season - 1);\n        }\n      }\n\n      this.setState({\n        ratingFactor: parseFloat(ratingFactor)\n      })\n    }\n\n  }\n\n  // Overlay will allow for pop ups. null for now\n  render() {\n    var overlay = null;\n\n    var content;\n\n    if (this.state.episode) {\n      content = (\n        <Episode\n          episode={this.state.episode}\n          seasons={this.state.seasons}\n          rating={this.state.ratingFactor}\n          changeParams={this.clearEpisode}\n          changeEpisode={this.changeEpisode}\n          loading={this.state.loading}\n        />\n      );\n    } else if (this.state.show) {\n      content = (\n        <Details\n          show={this.state.show}\n          seasons={this.state.seasons}\n          rating={this.state.ratingFactor}\n          loading={this.state.loading}\n          loadToggle={this.state.loadToggle}\n          initSeasons={this.initSeasons}\n          toggleSeason={this.toggleSeason}\n          updateRating={this.updateRating}\n          changeEpisode={this.changeEpisode}\n        />\n      );\n    } else if (this.state.queried) {\n      console.log(this.state.show);\n      content = (\n        <Results\n          query={this.state.query}\n          loading={this.state.loading}\n          loadToggle={this.loadToggle}\n          results={this.state.results}\n          more={this.state.more_button}\n          handleUpdate={this.updateSearch}\n          onClick={this.setShow}\n        />\n      );\n    } else {\n      content = (\n        <Start\n          setShow={this.suggestionJump}\n        />\n      );\n    }\n\n    return (\n      <div id='frame' className='col-12 row-12'>\n        {overlay}\n        <TopBar\n          nav={this.state.nav}\n          flip={this.navToggle}\n        />\n        <div id=\"content\" className='future-border'>\n          <Search\n            search_input={this.state.search_input}\n            handleChange={this.handleQuery}\n            handleSubmit={this.handleSearch}\n          />\n          <br/>\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}