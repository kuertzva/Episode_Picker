{"version":3,"sources":["mainButton.js","topBar.js","search.js","start.js","loadScreen.js","results.js","season.js","seasonBox.js","ratingBox.js","details.js","episode.js","App.js","serviceWorker.js","index.js"],"names":["MainButton","props","button","document","getElementById","this","id","style","getComputedStyle","parentNode","height","width","content","wrapperStyle","classes","inline","link","className","href","action","title","onClick","React","Component","TopBar","nav","class","flip","Search","for","type","name","onChange","e","handleChange","value","query","handleSubmit","Start","LoadScreen","string","Results","runSearch","bind","newSearch","console","log","loadToggle","$","get","data","status","handleUpdate","alert","prevProps","results","shows","buffer","footer","formatResult","result","data-id","data-title","data-image","image","key","src","length","loading","Array","isArray","map","show","more","Season","active","toggleSeason","data-index","index","season","number","SeasonBox","target","getAttribute","contents","seasons","indexOf","makeSeason","RatingBox","min","max","step","rating","updateRating","changeEpisode","Details","post","initSeasons","input","updateSeasons","Episode","generateEpisode","active_seasons","push","season_list","ratingFactor","episode","summary","changeParams","App","navToggle","handleQuery","handleSearch","updateSearch","setShow","clearEpisode","state","search_input","queried","more_button","setState","batch","concat","element","currentTarget","showTitle","showId","showImage","seasonIndex","newSeasons","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b01638c.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport './static/mainButton.scss';\n\nclass MainButton extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    var button = document.getElementById(this.props.id);\n    var style = getComputedStyle(button);\n    button.parentNode.style.height = style.height;\n    button.parentNode.style.width = style.width;\n  }\n\n  render() {\n    var content;\n    const wrapperStyle = {\n      height: this.height,\n      width: this.width\n    }\n\n    var classes = 'future-border';\n    if (this.props.inline) {\n      classes += ' inline'\n    }\n\n    if (this.props.link) {\n      classes += ' buttonish';\n      content = (\n        <a\n          className={classes}\n          href={this.props.action}\n          id={this.props.id}\n        >\n          {this.props.title}\n        </a>\n      );\n\n    } else {\n      content = (\n        <button\n          className={classes}\n          onClick={this.props.action}\n          id={this.props.id}\n        >\n          {this.props.title}\n        </button>\n      );\n    }\n\n    return (\n      <div\n        className='button-wrapper'\n        style = {wrapperStyle}\n      >\n        {content}\n      </div>\n    )\n  }\n}\n\nexport default MainButton;\n","import React from 'react';\nimport MainButton from './mainButton.js';\nimport './static/topBar.scss';\n\nexport function TopBar(props) {\n  var display;\n\n  if(props.nav) {\n    display = (\n      <div id='nav-bar' class='col-12'>\n        <button\n          id='nav-bar-close'\n          class='close-button'\n          onClick={props.flip}\n        >\n          X\n        </button>\n        <div id='inner-nav'>\n          <a class='link-block' href='https://vkwebsite.herokuapp.com/'>Homepage</a>\n          <a class='link-block' href='https://vkplaid.herokuapp.com/'>Plaid Maker</a>\n          <a class='link-block' href='https://vkep-picker.herokuapp.com/ep_search' id='active'>Episode Picker</a>\n          <p class='hidden link-block' id='placeholder'></p>\n        </div>\n      </div>\n    )\n  } else {\n    display = (\n      <div id='top-bar'>\n        <div>\n          <MainButton\n            id='open-nav-button'\n            action={props.flip}\n            title='Nav Bar'\n            link={false}\n            inline={true}\n          />\n          <h1> Episode Picker </h1>\n          <MainButton\n            id='github-button'\n            action='https://github.com/kuertzva/Episode_Picker'\n            title='Github'\n            link={true}\n            inline={true}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return display;\n}\n\n// export default TopBar;\n","import React from 'react';\nimport MainButton from './mainButton.js';\nimport './static/search.scss';\n\nfunction Search(props) {\n  return(\n    <div id='search-section'>\n      <span>\n        <label for='search'> Show: </label>\n        <input\n          type='text'\n          name='search'\n          onChange={(e) => props.handleChange(e)}\n          value={props.query}\n        />\n        <MainButton\n          id='search-button'\n          title='Search'\n          action={props.handleSubmit}\n          link={false}\n        />\n      </span>\n    </div>\n  )\n}\n\nexport default Search;\n","import React from 'react';\nimport './static/start.scss';\n\nfunction Start(props) {\n  return (\n    <div id='start-page'>\n      <div id='past-searches' className='quick-showcase future-border'>\n        <p>Past Searches: IN DEVELOPMENT</p>\n        <div className='showcase'></div>\n      </div>\n      <div id='popular-searches' className='quick-showcase future-border'>\n        <p>Popular Searches: IN DEVELOPMENT</p>\n        <div className='showcase'></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Start;\n","import React from 'react';\nimport './static/loadScreen.scss';\n\nfunction LoadScreen(props) {\n    return (\n      <h3 className='loading'>\n        {props.string}\n        <span></span>\n      </h3>\n    );\n}\n\nexport default LoadScreen;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport MainButton from './mainButton.js';\nimport './static/results.scss';\nimport $ from 'jquery';\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.runSearch = this.runSearch.bind(this);\n    this.newSearch = this.newSearch.bind(this);\n  }\n\n  runSearch() {\n    console.log('runSearch()')\n    var attempts = 0;\n    var success = false;\n    var output;\n    this.props.loadToggle();\n\n    $.get('/search_batch', (data, status) => {\n      //\n      this.props.handleUpdate(data);\n      console.log('received')\n    });\n  }\n\n  newSearch() {\n    console.log('search terms initiated');\n    $.get('/q=' + this.props.query, (data, status) => {\n\n\n\n      if (data) {\n        this.runSearch(data);\n      } else {\n        alert(\"Error: failed to update search parameters on server\");\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.newSearch();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.query !== this.props.query) {\n      this.newSearch();\n    }\n  }\n\n  render() {\n    var results;\n    var loading;\n    console.log(this.props.length);\n\n    function formatResult(result) {\n      return (\n        <div\n          data-id={result.id}\n          data-title={result.title}\n          data-image={result.image}\n          key={result.id}\n          onClick={(e) => this.props.onClick(e)}\n          className=\"result\"\n        >\n          <h3> {result.title} </h3>\n          <img src={result.image}/>\n        </div>\n      )\n    }\n    formatResult = formatResult.bind(this);\n\n    if (!this.props.loading && this.props.results.length === 0) {\n      results = (\n        <div id=\"no-results\">\n          <h3> Umm... Hey... </h3>\n          <br/>\n          <p>\n            {\"Your search for '\" + this.props.query +\n            \"' hasn't turned up any results.\"}\n          </p>\n          <br/>\n          <p>\n            {\"This could be due to IMDB not having a matching show or it could be a bug in my code. Please feel encouraged to contact me at kuertzva@miamioh.edu\"}\n          </p>\n        </div>\n      );\n    } else {\n      console.log(this.props.results);\n      console.log(Array.isArray(this.props.results));\n      var shows;\n      var buffer;\n      var footer;\n\n      // create space so search screen doesn't crowd header\n      if (this.props.results.length < 1) {\n        buffer = <div className='load-buffer'></div>\n        shows = null;\n      } else {\n        buffer = null\n        shows = this.props.results.map((show) => formatResult(show));\n      }\n\n      // determine whether to display button, loading screen or nothing\n      if (this.props.loading) {\n        footer =(\n          <div className='load-results'>\n            <LoadScreen string='Searching'/>\n          </div>\n        );\n      } else if (this.props.more) {\n        footer = (\n          <MainButton\n            id='more-shows-button'\n            title='More Shows'\n            action={this.runSearch}\n            link={false}\n          />\n        );\n      } else {\n        footer = null;\n      }\n\n      // output\n      results = (\n        <div id=\"results\">\n          {shows}\n          {buffer}\n          {footer}\n        </div>\n      )\n    }\n\n\n    return (\n      <div id=\"results-page\">\n        <h2> {\"Search for '\" +this.props.query + \"':\"} </h2>\n        {results}\n      </div>\n    );\n  }\n}\n\n\nexport default Results;\n","import React from 'react';\nimport './static/season.scss';\n\nfunction Season(props) {\n  return (\n    <p\n      className={props.active}\n      onClick={(e) => props.toggleSeason(e)}\n      data-index={props.index}\n    >\n      {props.season.number}\n    </p>\n  )\n}\n\nexport default Season;\n","import React from 'react';\nimport Season from './season.js';\nimport './static/seasonBox.scss';\n\nfunction SeasonBox(props) {\n\n  function toggleSeason(e) {\n    const index = e.target.getAttribute('data-index');\n    props.toggleSeason(index);\n  }\n\n  function makeSeason(season) {\n\n    var index = props.seasons.indexOf(season);\n    return (\n      <Season\n        season={season}\n        active={'season ' +\n        (season.active? 's-active' : 's-inactive')}\n        key={index}\n        index={index}\n        toggleSeason={toggleSeason}\n      />\n    );\n  }\n\n  var contents = props.seasons.map(season =>(\n    makeSeason(season)\n  ));\n\n  return (\n    <div\n      id='season-box'\n    >\n      <h4>Seasons:</h4>\n      <div id='seasons'>\n        {contents}\n      </div>\n    </div>\n  );\n}\n\nexport default SeasonBox;\n","import React from 'react';\nimport MainButton from './mainButton.js';\nimport './static/ratingBox.scss';\n\nfunction RatingBox(props) {\n\n  return (\n    <div id='rating-box'>\n      <h4>Rating Factor:</h4>\n      <div id='input-wrapper'>\n        <input\n          type='range'\n          min={1}\n          max={3}\n          step={.1}\n          value={props.rating}\n          onChange={(e) => props.updateRating(e)}\n        />\n        <h5 id='left-label'> None </h5>\n        <h5 id='right-label'> Max </h5>\n      </div>\n      <MainButton\n        id='get-episode-button'\n        title='Submit'\n        action={() => props.changeEpisode('empty')}\n        link={false}\n      />\n    </div>\n  );\n}\n\nexport default RatingBox;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport SeasonBox from './seasonBox.js';\nimport RatingBox from './ratingBox.js';\nimport './static/details.scss';\nimport $ from 'jquery';\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    // gather the seasons from server\n    $.post('/details', {'show_id': this.props.show.id},\n    (data) => {\n      //format seasons\n      var seasons = data.map((season) => {\n        return {\n          number: season,\n          active: true\n        }\n      })\n      this.props.initSeasons(seasons);\n    });\n  }\n\n  render() {\n    var input;\n\n    // if loading\n    if (this.props.loading) {\n      input = (\n        <div className='load-details'>\n          <LoadScreen string='Loading'/>\n        </div>\n      );\n    // make seasons\n    } else {\n      input = (\n        <div\n          id='details-input'\n        >\n          <SeasonBox\n            seasons={this.props.seasons}\n            updateSeasons={this.props.updateSeasons}\n            toggleSeason={this.props.toggleSeason}\n          />\n          <RatingBox\n            rating={this.props.rating}\n            updateRating={this.props.updateRating}\n            changeEpisode={this.props.changeEpisode}\n          />\n        </div>\n      );\n    }\n\n\n    return (\n      <div\n        id='details-screen'\n      >\n        <div\n          id=\"details-display\"\n        >\n          <h3>{this.props.show.title}</h3>\n          <img src={this.props.show.image}/>\n        </div>\n        {input}\n      </div>\n    )\n  }\n\n\n}\n\nexport default Details;\n","import React from 'react';\nimport LoadScreen from './loadScreen.js';\nimport MainButton from './mainButton.js';\nimport $ from 'jquery';\nimport './static/episode.scss';\n\nclass Episode extends React.Component {\n  constructor(props) {\n    super(props);\n    this.generateEpisode = this.generateEpisode.bind(this);\n  }\n\n  generateEpisode() {\n\n    // find active seasons for search\n    var active_seasons = [];\n    var season;\n    for(season of this.props.seasons) {\n      if(season.active) {\n        active_seasons.push(season.number);\n      }\n    }\n\n    //console.log(active_seasons);\n\n    // get episode\n    $.post('/episode', { season_list: active_seasons, ratingFactor: this.props.rating\n    }, (data) => {\n      //format seasons\n      console.log('data received');\n      this.props.changeEpisode(data);\n      console.log('data formatted');\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.episode === 'empty') {\n      this.generateEpisode();\n    }\n  }\n\n  render() {\n    if (this.props.episode === 'empty') {\n      return (\n        <div id='load-episode'>\n          <LoadScreen\n            string='Loading'\n          />\n        </div>\n\n      )\n    } else {\n      return (\n        <div id='episode-screen'>\n          <div id='episode-top'>\n            <h3>{'S' + this.props.episode.season + ' E' +\n            this.props.episode.number + ': ' + this.props.episode.title}</h3>\n            <img src={this.props.episode.image}/>\n          </div>\n          <div id='episode-bottom'>\n            <p>{this.props.episode.summary}</p>\n            <div id='episode-button-box'>\n              <MainButton\n                id='different-episode-button'\n                title='Different Episode'\n                action={() => this.props.changeEpisode('empty')}\n                link={false}\n              />\n              <MainButton\n                id='change-params-button'\n                title='Change Parameters'\n                action={this.props.changeParams}\n                link={false}\n              />\n            </div>\n          </div>\n        </div>\n    );}\n  }\n}\n\nexport default Episode;\n","import React from 'react';\nimport { TopBar } from './topBar.js';\nimport './static/App.scss';\nimport Search from './search.js'\nimport Start from './start.js';\nimport Results from './results.js';\nimport Details from './details.js';\nimport Episode from './episode.js';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.navToggle = this.navToggle.bind(this);\n    this.loadToggle = this.loadToggle.bind(this);\n    this.handleQuery = this.handleQuery.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.updateSearch = this.updateSearch.bind(this);\n    this.setShow = this.setShow.bind(this);\n    this.initSeasons = this.initSeasons.bind(this);\n    this.toggleSeason = this.toggleSeason.bind(this);\n    this.updateRating = this.updateRating.bind(this);\n    this.changeEpisode = this.changeEpisode.bind(this);\n    this.clearEpisode = this.clearEpisode.bind(this);\n\n    this.state = {\n      nav: false,\n      loading: false,\n      search_input: '',\n      query: '',\n      queried: false,\n      results: [],\n      more_button: true,\n      show: null,\n      seasons: [],\n      ratingFactor: 1,\n      episode: null\n    }\n  }\n\n  navToggle() {\n    this.setState((state) => ({\n      nav: !(state.nav)\n    }));\n\n  }\n\n  loadToggle() {\n    this.setState((state) => ({\n      loading: !(state.loading)\n    }));\n  }\n\n\n  // start page functions\n  handleQuery(e) {\n    const value = e.target.value;\n\n    //scrub as needed later\n\n    this.setState({\n      search_input: value\n    })\n\n    //console.log(this.state.query);\n\n  }\n\n  handleSearch() {\n    console.log(\"handleSearch\")\n    if (this.state.search_input.length > 0\n        && this.state.search_input !== this.state.query) {\n      console.log(\"extra length\");\n      this.setState((state) => ({\n        queried : true,\n        query: state.search_input,\n        results: [],\n        show: null,\n        seasons: [],\n        ratingFactor: 1,\n        episode: null\n      }));\n    }\n  }\n\n  //search page functions\n  updateSearch(data) {\n\n    console.log('updateSearch');\n\n    const batch = data[0];\n\n    console.log(batch.length);\n\n    this.setState({\n      results: this.state.results.concat(batch),\n      more_button: data[1]\n    });\n\n    this.loadToggle();\n  }\n\n  setShow(e) {\n    const element = e.currentTarget;\n    const showTitle = element.getAttribute('data-title');\n    const showId = element.getAttribute('data-id');\n    const showImage = element.getAttribute('data-image');\n\n    this.setState({\n      show: {\n        title: showTitle,\n        id: showId,\n        image: showImage\n      }\n    });\n\n    this.loadToggle();\n  }\n\n  //details page functions\n  initSeasons(seasons) {\n    this.setState({\n      seasons: seasons\n    })\n\n    if(this.state.loading) {\n      this.loadToggle();\n    }\n\n    console.log('updateSeasons()');\n  }\n\n  toggleSeason(seasonIndex) {\n    var newSeasons = this.state.seasons;\n\n    newSeasons[seasonIndex].active = !newSeasons[seasonIndex].active;\n\n    this.setState({\n      seasons: newSeasons\n    })\n  }\n\n  updateRating(e) {\n    this.setState({\n      ratingFactor: e.target.value\n    })\n  }\n\n  changeEpisode(data) {\n    this.setState({\n      episode: data\n    })\n  }\n\n  clearEpisode() {\n    this.setState({\n      episode: null\n    })\n  }\n\n  // Overlay will allow for pop ups. null for now\n  render() {\n    var overlay = null;\n\n    var content;\n\n    if (this.state.episode) {\n      content = (\n        <Episode\n          episode={this.state.episode}\n          seasons={this.state.seasons}\n          rating={this.state.ratingFactor}\n          changeParams={this.clearEpisode}\n          changeEpisode={this.changeEpisode}\n          loading={this.state.loading}\n        />\n      );\n    } else if (this.state.show) {\n      content = (\n        <Details\n          show={this.state.show}\n          seasons={this.state.seasons}\n          rating={this.state.ratingFactor}\n          loading={this.state.loading}\n          loadToggle={this.state.loadToggle}\n          initSeasons={this.initSeasons}\n          toggleSeason={this.toggleSeason}\n          updateRating={this.updateRating}\n          changeEpisode={this.changeEpisode}\n        />\n      );\n    } else if (this.state.queried) {\n      console.log(this.state.show);\n      content = (\n        <Results\n          query={this.state.query}\n          loading={this.state.loading}\n          loadToggle={this.loadToggle}\n          results={this.state.results}\n          more={this.state.more_button}\n          handleUpdate={this.updateSearch}\n          onClick={this.setShow}\n        />\n      );\n    } else {\n      content = (\n        <Start/>\n      );\n    }\n\n    return (\n      <div id='frame' className='col-12 row-12'>\n        {overlay}\n        <TopBar\n          nav={this.state.nav}\n          flip={this.navToggle}\n        />\n        <div id=\"content\" className='future-border'>\n          <Search\n            search_input={this.state.search_input}\n            handleChange={this.handleQuery}\n            handleSubmit={this.handleSearch}\n          />\n          <br/>\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}